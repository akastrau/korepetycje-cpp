{
    "docs": [
        {
            "location": "/",
            "text": "Witaj w kursie podstaw programowania w j\u0119zyku C++!\n\u00b6\n\n\nKody \u017ar\u00f3d\u0142owe znajduj\u0105 si\u0119 w \nrepozytorium Bitbucket\n.\n\n\n\n\nWskaz\u00f3wka\n\n\nOdno\u015bnik do repozytorium znajduje si\u0119 tak\u017ce w prawym g\u00f3rnym rogu menu.\n\n\n\n\nS\u0142owo na niedziel\u0119... czyli kr\u00f3tki wst\u0119p\n\u00b6\n\n\nO czym b\u0119dzie ten kurs\n\u00b6\n\n\nMateria\u0142y umieszczone na tej stronie s\u0105 elementami pomocniczymi do nauki j\u0119zyka C++. Wszystkie inne aspekty om\u00f3wione b\u0119d\u0105 na zaj\u0119ciach. Nie b\u0119d\u0119 za bardzo wnika\u0142 w teorie (jednak niekt\u00f3re elementy kr\u00f3tko opisze).\n\n\nKurs b\u0119dzie na bie\u017c\u0105co zmieniany. Cz\u0119\u015b\u0107 \u0107wicze\u0144 b\u0119d\u0105 umieszczone w repozytorium. Materia\u0142y o kt\u00f3rych wspomnia\u0142em maj\u0105 posta\u0107 mini \u015bci\u0105gawki (warto zapozna\u0107 si\u0119 z nimi przed zaj\u0119ciami).\n\n\nO czym nie b\u0119dzie ten kurs\n\u00b6\n\n\nNie b\u0119dziemy zajmowa\u0107 si\u0119 tematyk\u0105 algorytm\u00f3w (jest wiele ciekawych pozycji ju\u017c na ten temat). Nie b\u0119dziemy tak\u017ce skupia\u0107 si\u0119 tak bardzo na metodykach wytwarzania oprogramowania (bo tym zajmuj\u0119 si\u0119 in\u017cyneria oprogramowania).\n\n\nStruktura kursu\n\u00b6\n\n\nKurs podzieli\u0142em na dwie zasadnicze cz\u0119\u015bci. Pierwsza bardzo wa\u017cna omawia programowanie proceduralne w j\u0119zyku C. Druga za\u015b b\u0119dzie opisywa\u0107 programowanie zorientowane obiektowo, czyli pewne podej\u015bcie wykorzystywane w wielu systemach informatycznych.\n\n\nW pierwszej cz\u0119\u015bci nie zabraknie podstawowych aspekt\u00f3w programowania (podstawowe typy i struktury danych). Poka\u017ce w niej tak\u017ce w jaki spos\u00f3b sterowa\u0107 dzia\u0142aniem programu (z ang. control flow). Do tego wszystkiego nauczymy si\u0119 korzysta\u0107 z dobrodziejstw debuggera.\n\n\nNast\u0119pnie wejdziemy w \u015bwiat programowania zorietowanego obiektowo. Poznamy r\u00f3\u017cnice mi\u0119dzy programowaniem proceduralnym i obiektowym. Nauczymy si\u0119 modelowa\u0107 programy w podej\u015bciu obiektowym.\n\n\nDlaczego j\u0119zyk C?\n\u00b6\n\n\nZaczynamy od tego j\u0119zyka z kilku powod\u00f3w:\n\n\n\n\nJest prostszy w swojej strukturze (brak z\u0142o\u017conych obiekt\u00f3w), \n\n\nBiblioteka standardowa jest ma\u0142a (je\u015bli chodzi o ilo\u015b\u0107 funkcji w por\u00f3wnaniu do j\u0119zyka C++),\n\n\nNauczymy si\u0119 operowa\u0107 na wska\u017anikach (pozwoli nam to zrozumie\u0107 pewne mechanizmy istniej\u0105ce w jezykach bazuj\u0105cych na j\u0119zyku C),\n\n\nDaje nam dost\u0119p bezpo\u015brednio do pami\u0119ci RAM (ni\u017cej jest tylko j\u0119zyk Asembler).\n\n\n\n\n\n\n\u0179r\u00f3d\u0142o: https://comm2302metafiction.wordpress.com/2012/10/03/the-equal-dilemma/\n\n\nTo wszystko pozwoli nam na p\u0142ynne przej\u015bcie do C++.\n\n\n\u0179r\u00f3d\u0142a wiedzy (polecane przeze mnie)\n\u00b6\n\n\nCzytanie dokumentacji to bardzo wa\u017cna umiej\u0119tno\u015b\u0107! Dlatego polecam u\u017cywa\u0107 dokumentacji z przyk\u0142adami.\nNa co dzie\u0144 korzystam z dokumentacji z portalu \ncplusplus.com\n. Mo\u017cna tam znale\u017a\u0107 tutorale dotycz\u0105ce j\u0119zyka C i C++. Drug\u0105 stron\u0105, kt\u00f3ry kazdy programista powinien zna\u0107 to \nStack Overflow\n.\n\n\n\n\n\u0179r\u00f3d\u0142o: imgur.com\n\n\nZ jakiego IDE polecam korzysta\u0107\n\u00b6\n\n\nIDE to \u015brodowisko programistyczne kt\u00f3rego w sk\u0142ad wchodz\u0105:\n\n\n\n\nkompilator\n\n\nlinker\n\n\ndebugger\n\n\ni najcz\u0119\u015bciej inne narz\u0119dzia pomagaj\u0105ce w pisaniu kodu.\n\n\n\n\nNa zaj\u0119ciach bedziemy korzysta\u0107 z Visual Studio 2017 (wersja community - do pobrania za darmo).\n\n\n\n\u0179r\u00f3d\u0142o: http://i.memecaptain.com/gend_images/loHMIw.jpg\n\n\nSystem kontroli wersji\n\u00b6\n\n\nNa zaj\u0119ciach b\u0119dziemy korzysta\u0107 z system\u00f3w kontroli wersji opartych o technologie Git. Wszystkie instrukcje co do konfiguracji \u015brodowiska b\u0119d\u0105/zosta\u0142y om\u00f3wione na zaj\u0119ciach.\n\n\nAlgorytmy + struktury danych = programy\n\u00b6\n\n\n\n\nKsi\u0105\u017cka napisana przez Niklausa Wirtha \u015bwietnie ukazuj\u0105ca istote algorytm\u00f3w i struktur danych.",
            "title": "Strona g\u0142\u00f3wna"
        },
        {
            "location": "/#witaj-w-kursie-podstaw-programowania-w-jezyku-c",
            "text": "Kody \u017ar\u00f3d\u0142owe znajduj\u0105 si\u0119 w  repozytorium Bitbucket .   Wskaz\u00f3wka  Odno\u015bnik do repozytorium znajduje si\u0119 tak\u017ce w prawym g\u00f3rnym rogu menu.",
            "title": "Witaj w kursie podstaw programowania w j\u0119zyku C++!"
        },
        {
            "location": "/#sowo-na-niedziele-czyli-krotki-wstep",
            "text": "",
            "title": "S\u0142owo na niedziel\u0119... czyli kr\u00f3tki wst\u0119p"
        },
        {
            "location": "/#o-czym-bedzie-ten-kurs",
            "text": "Materia\u0142y umieszczone na tej stronie s\u0105 elementami pomocniczymi do nauki j\u0119zyka C++. Wszystkie inne aspekty om\u00f3wione b\u0119d\u0105 na zaj\u0119ciach. Nie b\u0119d\u0119 za bardzo wnika\u0142 w teorie (jednak niekt\u00f3re elementy kr\u00f3tko opisze).  Kurs b\u0119dzie na bie\u017c\u0105co zmieniany. Cz\u0119\u015b\u0107 \u0107wicze\u0144 b\u0119d\u0105 umieszczone w repozytorium. Materia\u0142y o kt\u00f3rych wspomnia\u0142em maj\u0105 posta\u0107 mini \u015bci\u0105gawki (warto zapozna\u0107 si\u0119 z nimi przed zaj\u0119ciami).",
            "title": "O czym b\u0119dzie ten kurs"
        },
        {
            "location": "/#o-czym-nie-bedzie-ten-kurs",
            "text": "Nie b\u0119dziemy zajmowa\u0107 si\u0119 tematyk\u0105 algorytm\u00f3w (jest wiele ciekawych pozycji ju\u017c na ten temat). Nie b\u0119dziemy tak\u017ce skupia\u0107 si\u0119 tak bardzo na metodykach wytwarzania oprogramowania (bo tym zajmuj\u0119 si\u0119 in\u017cyneria oprogramowania).",
            "title": "O czym nie b\u0119dzie ten kurs"
        },
        {
            "location": "/#struktura-kursu",
            "text": "Kurs podzieli\u0142em na dwie zasadnicze cz\u0119\u015bci. Pierwsza bardzo wa\u017cna omawia programowanie proceduralne w j\u0119zyku C. Druga za\u015b b\u0119dzie opisywa\u0107 programowanie zorientowane obiektowo, czyli pewne podej\u015bcie wykorzystywane w wielu systemach informatycznych.  W pierwszej cz\u0119\u015bci nie zabraknie podstawowych aspekt\u00f3w programowania (podstawowe typy i struktury danych). Poka\u017ce w niej tak\u017ce w jaki spos\u00f3b sterowa\u0107 dzia\u0142aniem programu (z ang. control flow). Do tego wszystkiego nauczymy si\u0119 korzysta\u0107 z dobrodziejstw debuggera.  Nast\u0119pnie wejdziemy w \u015bwiat programowania zorietowanego obiektowo. Poznamy r\u00f3\u017cnice mi\u0119dzy programowaniem proceduralnym i obiektowym. Nauczymy si\u0119 modelowa\u0107 programy w podej\u015bciu obiektowym.",
            "title": "Struktura kursu"
        },
        {
            "location": "/#dlaczego-jezyk-c",
            "text": "Zaczynamy od tego j\u0119zyka z kilku powod\u00f3w:   Jest prostszy w swojej strukturze (brak z\u0142o\u017conych obiekt\u00f3w),   Biblioteka standardowa jest ma\u0142a (je\u015bli chodzi o ilo\u015b\u0107 funkcji w por\u00f3wnaniu do j\u0119zyka C++),  Nauczymy si\u0119 operowa\u0107 na wska\u017anikach (pozwoli nam to zrozumie\u0107 pewne mechanizmy istniej\u0105ce w jezykach bazuj\u0105cych na j\u0119zyku C),  Daje nam dost\u0119p bezpo\u015brednio do pami\u0119ci RAM (ni\u017cej jest tylko j\u0119zyk Asembler).    \u0179r\u00f3d\u0142o: https://comm2302metafiction.wordpress.com/2012/10/03/the-equal-dilemma/  To wszystko pozwoli nam na p\u0142ynne przej\u015bcie do C++.",
            "title": "Dlaczego j\u0119zyk C?"
        },
        {
            "location": "/#zroda-wiedzy-polecane-przeze-mnie",
            "text": "Czytanie dokumentacji to bardzo wa\u017cna umiej\u0119tno\u015b\u0107! Dlatego polecam u\u017cywa\u0107 dokumentacji z przyk\u0142adami.\nNa co dzie\u0144 korzystam z dokumentacji z portalu  cplusplus.com . Mo\u017cna tam znale\u017a\u0107 tutorale dotycz\u0105ce j\u0119zyka C i C++. Drug\u0105 stron\u0105, kt\u00f3ry kazdy programista powinien zna\u0107 to  Stack Overflow .   \u0179r\u00f3d\u0142o: imgur.com",
            "title": "\u0179r\u00f3d\u0142a wiedzy (polecane przeze mnie)"
        },
        {
            "location": "/#z-jakiego-ide-polecam-korzystac",
            "text": "IDE to \u015brodowisko programistyczne kt\u00f3rego w sk\u0142ad wchodz\u0105:   kompilator  linker  debugger  i najcz\u0119\u015bciej inne narz\u0119dzia pomagaj\u0105ce w pisaniu kodu.   Na zaj\u0119ciach bedziemy korzysta\u0107 z Visual Studio 2017 (wersja community - do pobrania za darmo).  \u0179r\u00f3d\u0142o: http://i.memecaptain.com/gend_images/loHMIw.jpg",
            "title": "Z jakiego IDE polecam korzysta\u0107"
        },
        {
            "location": "/#system-kontroli-wersji",
            "text": "Na zaj\u0119ciach b\u0119dziemy korzysta\u0107 z system\u00f3w kontroli wersji opartych o technologie Git. Wszystkie instrukcje co do konfiguracji \u015brodowiska b\u0119d\u0105/zosta\u0142y om\u00f3wione na zaj\u0119ciach.",
            "title": "System kontroli wersji"
        },
        {
            "location": "/#algorytmy-struktury-danych-programy",
            "text": "Ksi\u0105\u017cka napisana przez Niklausa Wirtha \u015bwietnie ukazuj\u0105ca istote algorytm\u00f3w i struktur danych.",
            "title": "Algorytmy + struktury danych = programy"
        },
        {
            "location": "/c/",
            "text": "Cz\u0119\u015b\u0107 pierwsza kursu - podstawy programowania w j\u0119zyku C\n\u00b6\n\n\nW tej cz\u0119\u015bci skupimy si\u0119 na podstawowych elementach tego j\u0119zyka. Poznamy w jaki spos\u00f3b definiuje si\u0119 funkcje. Nie zabraknie te\u017c zabawy ze wska\u017anikami oraz ze strukturami danych.\n\n\n\n\n\u0179r\u00f3d\u0142o: http://www.quickmeme.com/meme/3ovgn9\n\n\nOstatnia aktualizacja:\n Mon Sep 18 18:36:36 CEST 2017",
            "title": "Cz\u0119\u015b\u0107 pierwsza kursu - podstawy programowania w j\u0119zyku C"
        },
        {
            "location": "/c/#czesc-pierwsza-kursu-podstawy-programowania-w-jezyku-c",
            "text": "W tej cz\u0119\u015bci skupimy si\u0119 na podstawowych elementach tego j\u0119zyka. Poznamy w jaki spos\u00f3b definiuje si\u0119 funkcje. Nie zabraknie te\u017c zabawy ze wska\u017anikami oraz ze strukturami danych.   \u0179r\u00f3d\u0142o: http://www.quickmeme.com/meme/3ovgn9  Ostatnia aktualizacja:  Mon Sep 18 18:36:36 CEST 2017",
            "title": "Cz\u0119\u015b\u0107 pierwsza kursu - podstawy programowania w j\u0119zyku C"
        },
        {
            "location": "/lesson01-p1/",
            "text": "Pierwsze koty za p\u0142oty... czyli nasza pierwsza aplikacja napisana w j\u0119zyku C\n\u00b6\n\n\nJak zacz\u0105\u0107\n\u00b6\n\n\nW Visual Studio tworzymy nowy projekt C++. Wybieramy \nEmpty Project\n. Po utworzeniu nowego projektu musimy utworzy\u0107 nowy plik (niech to b\u0119dzie plik \nSource.c\n). Rozszerzenie \n.c\n m\u00f3wi nam o tym, \u017ce nasz kod \u017ar\u00f3d\u0142owy b\u0119dzie pisany w j\u0119zyku C.\n\n\n\n\n\u0179r\u00f3d\u0142o: http://devhumor.com/media/i-can-write-quot-hello-world-quot-in-c\n\n\nNo to jazda, jazda, jazda, tr\u00f3jk\u0105t, gwiazda!\n\u00b6\n\n\nNapiszmy:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n#include\n \n<stdio.h>\n\n\n#include\n \n<stdlib.h>\n\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nint\n \nvariable\n \n=\n \n4\n;\n\n    \nprintf\n(\n\"Hello! Your number is %i!\n\\n\n\"\n,\n \nvariable\n);\n\n\n    \nsystem\n(\n\"pause\"\n);\n\n    \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\nCo tutaj si\u0119 sta\u0142o? W pierwszej linijce napisalismy \n#include <stdio.h>\n. Oznacza to, \u017ce kompilator do\u0142\u0105czy za nas biblioteke \nstdio.h\n. W drugiej za\u015b biblioteke \nstdlib.h\n.\n\n\nDlaczego te biblioteki do\u0142\u0105czyli\u015bmy? Pierwsza z nich to \nSTanDard Input Output library\n. Znajdziemy w niej podstawowe funkcje wej\u015bcia/wyj\u015bcia (takie jak wypisywanie tekstu na ekran). Z kolei \nstdlib.h\n to \nSTanDard LIBrary\n. Znajdziemy w niej postawowe sta\u0142e i makra takie jak \nEXIT_SUCCESS\n.\n\n\n\n\nCiekawostka\n\n\nMakro \nEXIT_SUCCESS\n to pewna sta\u0142a.\nW bibliotece standardowej sta\u0142a \nEXIT_SUCCESS\n przyjmuje warto\u015b\u0107 \n0\n\nIstnieje tak\u017ce makro \nEXIT_FAILURE\n, kt\u00f3re definiuje warto\u015b\u0107 \n1\n.\n\n\n\n\nFunkcja main - punkt startowy naszej aplikacji\n\u00b6\n\n\nAby nasz program m\u00f3g\u0142 si\u0119 uruchomi\u0107, kompilator musi wiedzie\u0107 w jakim miejscu zaczyna wykonywa\u0107 si\u0119 nasza aplikacja. Takim miejscem jest funcja \nmain\n. O funkcjach opowiemy sobie w innej lekcji. Na tym etapie zwr\u00f3\u0107 uwage na definicje naszej funkcji startowej:\n\n\n1\n2\n3\n4\n5\nint\n \nmain\n()\n\n\n{\n\n    \n// To jest nasza funkcja glowna\n\n    \nreturn\n \njakas_liczba\n;\n\n\n}\n\n\n\n\n\n\n\nCo oznacza s\u0142\u00f3wko kluczowe \nint\n? Oznacza to tyle, \u017ce funkcja po zako\u0144czeniu swojego dzia\u0142ania zwraca typ zmiennej typu \nint\n. O typach zmiennych opowiemy sobie za moment.\n\n\nNo dobra! Mam funkcje main i co dalej?\n\u00b6\n\n\nPrzyjrzyjmy si\u0119 jeszcze raz na nasz kod \u017ar\u00f3d\u0142owy z pocz\u0105tku lekcji. \n\n\nW linii numer 6 zadeklarowali\u015bmy zmienn\u0105 typu \nint\n o nazwie \nvariable\n. Dzi\u0119ki takiej deklaracji mo\u017cemy u\u017cy\u0107 naszej zmiennej w obr\u0119bie naszej funkcji (jest to zmienna lokalna). \n\n\nW kolejnej linijce u\u017cyli\u015bmy funkcji wbudowanej \nprintf()\n (printf to skr\u00f3t od \nprint formatted\n). Wy\u015bwietla ona sformatowany tekst. Sp\u00f3jrzmy na pierwszy argument, kt\u00f3ry wchodzi do naszej funkcji:\n\n\"Hello! Your number is %i!\\n\"\n. Jest to tekst, kt\u00f3ry zostanie wy\u015bwietlony na ekranie. \n%i\n oznacza, \u017ce kompilator podstawi tu zmienn\u0105 typu \nint\n. \n\\n\n na ko\u0144cu naszego tekstu oznacza znak nowej linii (z ang. \nnewline\n). Jako drugi argument w funkcji \nprintf()\n podali\u015bmy zmienn\u0105 \nvariable\n. Dzi\u0119ki temu funkcja \nprintf()\n podstawi warto\u015b\u0107 zmiennej pod \n%i\n.\n\n\nW linii numer 8 u\u017cyli\u015bmy funkcji \nsystem()\n. Funkcja ta wywo\u0142uje polecenie systemowe (w naszym przypadku jest to polecenie \npause\n, kt\u00f3re zatrzymuje dzia\u0142anie naszego programu i oczekuje na wci\u015bni\u0119cie dowolnego klawisza). Niestety polecenie \npause\n dzia\u0142a tylko w systemach Windows. W przypadku innych system\u00f3w musimy u\u017cy\u0107 innego rozwi\u0105zania, \u017ceby zatrzyma\u0107 dzia\u0142anie programu.\n\n\nW ostatniej linii napisali\u015bmy \nreturn 0\n co oznacza, \u017ce program zwr\u00f3ci liczbe 0 po zako\u0144czeniu dzia\u0142ania.\n\n\nKilka s\u0142\u00f3w o typach w C\n\u00b6\n\n\nMamy klika rodzaj\u00f3w zmiennych. S\u0105 to zmienne:\n- typu \nint\n, czyli liczby ca\u0142kowite 32-bitowe,\n- typu \nfloat\n, czyli liczby zmiennoprzecinkowe pojedy\u0144czej precyzji,\n- typu \ndouble\n, czyli liczby zmiennoprzecinkowe podw\u00f3jnej precyzji,\n- typu \nchar\n, czyli znak/litera lub \nchar\n* w przypadku \u0142ancuchu znak\u00f3w, czyli tekstu.\n\n\nOczywi\u015bcie mamy jeszcze wariant ze s\u0142owem \nlong\n, ale na tym etapie nie b\u0119d\u0119 o nim wspomina\u0107.\n\n\n\n\nWi\u0119cej o typach podstawowych\n\n\nWi\u0119cej informacji na temat typ\u00f3w podstawowych znajdziesz na przyk\u0142ad \ntu\n.\n\n\n\n\nFunkcja printf()\n\u00b6\n\n\nPrzy wywo\u0142aniu funkcji \nprintf()\n skorzystali\u015bmy z \n%i\n. Jest to tzw. \nformat specifier\n. Na podstawie dokumentacji z \ncplusplus.com\n wymienimy kilka dost\u0119pnych format\u00f3w wy\u015bwietlanych danych. Mi\u0119dzy innymi s\u0105 to:\n- \n%i\n lub \n%d\n dla liczb typu ca\u0142kowitego,\n- \n%f\n dla liczby zmiennoprzecinkowych,\n- \n%c\n dla pojedynczego znaku,\n- \n%s\n dla \u0142a\u0144cucha znaku.\n\n\nW funkcji \nprintf()\n mo\u017cna u\u017cy\u0107 specjalnych znak\u00f3w za pomoc\u0105 \n\\\n (przyk\u0142ad \n\\n\n). Zach\u0119cam do poczytania dokumentacji tej funkcji.\n\n\nNa zako\u0144czenie - return ITS_THE_END\n\u00b6\n\n\nS\u0142\u00f3wko kluczowe \nreturn\n w funkcji \nmain()\n wykorzystujemy po to, aby zasygnalizowa\u0107 stan wykonania naszego programu. Zwykle zwraca si\u0119:\n- \n0\n, gdy program zako\u0144czy\u0142 sie poprawnie,\n- \n1\n lub liczbe ujemn\u0105 gdy program zako\u0144czy\u0142 si\u0119 pora\u017ck\u0105.\n\n\nPraktyka czyni mistrza... czyli zadania do zrobienia\n\u00b6\n\n\nKod do zadania wygl\u0105da nast\u0119puj\u0105co:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n#include\n \n<stdio.h>\n\n\n#include\n \n<stdlib.h>\n\n\n\nint\n \nmain\n(\nvoid\n)\n\n\n{\n\n    \nconst\n \nfloat\n \npi\n \n=\n \n3.14159265\n;\n\n    \nchar\n \ntext\n[]\n \n=\n \n\"Some text here\"\n;\n\n    \nint\n \nnumber\n \n=\n \n1246754\n;\n\n    \ndouble\n \nnumerical_value\n \n=\n \n2674.3236434664311\n;\n\n\n    \n// Uzupelnij kod\n\n\n    \nsystem\n(\n\"pause\"\n);\n\n    \nreturn\n \nEXIT_SUCCESS\n;\n\n\n}\n\n\n\n\n\n\n\nZadania:\n\n\n\n\nWy\u015bwietl liczbe pi z dok\u0142adno\u015bci\u0105 do trzeciego miejsca po przecinku,\n\n\nWy\u015bwietl znak 1, 3 i 8 z \u0142ancucha \ntext\n,\n\n\nWy\u015bwietli liczbe \nnumber\n zaokr\u0105glaj\u0105c j\u0105 do pi\u0105tego miejsca,\n\n\nWy\u015bwietl liczb\u0119 \nnumerical_value\n w nast\u0119puj\u0105cy spos\u00f3b:\n\n\ncz\u0119\u015b\u0107 ca\u0142kowit\u0105 zaokr\u0105glij do drugiego miejsca,\n\n\ncz\u0119\u015b\u0107 u\u0142amkow\u0105 zaokr\u0105glij do \u00f3smego miejsca po przecinku.",
            "title": "Lekcja 01: Pierwszy program"
        },
        {
            "location": "/lesson01-p1/#pierwsze-koty-za-poty-czyli-nasza-pierwsza-aplikacja-napisana-w-jezyku-c",
            "text": "",
            "title": "Pierwsze koty za p\u0142oty... czyli nasza pierwsza aplikacja napisana w j\u0119zyku C"
        },
        {
            "location": "/lesson01-p1/#jak-zaczac",
            "text": "W Visual Studio tworzymy nowy projekt C++. Wybieramy  Empty Project . Po utworzeniu nowego projektu musimy utworzy\u0107 nowy plik (niech to b\u0119dzie plik  Source.c ). Rozszerzenie  .c  m\u00f3wi nam o tym, \u017ce nasz kod \u017ar\u00f3d\u0142owy b\u0119dzie pisany w j\u0119zyku C.   \u0179r\u00f3d\u0142o: http://devhumor.com/media/i-can-write-quot-hello-world-quot-in-c",
            "title": "Jak zacz\u0105\u0107"
        },
        {
            "location": "/lesson01-p1/#no-to-jazda-jazda-jazda-trojkat-gwiazda",
            "text": "Napiszmy:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 #include   <stdio.h>  #include   <stdlib.h>  int   main ()  { \n     int   variable   =   4 ; \n     printf ( \"Hello! Your number is %i! \\n \" ,   variable ); \n\n     system ( \"pause\" ); \n     return   0 ;  }    Co tutaj si\u0119 sta\u0142o? W pierwszej linijce napisalismy  #include <stdio.h> . Oznacza to, \u017ce kompilator do\u0142\u0105czy za nas biblioteke  stdio.h . W drugiej za\u015b biblioteke  stdlib.h .  Dlaczego te biblioteki do\u0142\u0105czyli\u015bmy? Pierwsza z nich to  STanDard Input Output library . Znajdziemy w niej podstawowe funkcje wej\u015bcia/wyj\u015bcia (takie jak wypisywanie tekstu na ekran). Z kolei  stdlib.h  to  STanDard LIBrary . Znajdziemy w niej postawowe sta\u0142e i makra takie jak  EXIT_SUCCESS .   Ciekawostka  Makro  EXIT_SUCCESS  to pewna sta\u0142a.\nW bibliotece standardowej sta\u0142a  EXIT_SUCCESS  przyjmuje warto\u015b\u0107  0 \nIstnieje tak\u017ce makro  EXIT_FAILURE , kt\u00f3re definiuje warto\u015b\u0107  1 .",
            "title": "No to jazda, jazda, jazda, tr\u00f3jk\u0105t, gwiazda!"
        },
        {
            "location": "/lesson01-p1/#funkcja-main-punkt-startowy-naszej-aplikacji",
            "text": "Aby nasz program m\u00f3g\u0142 si\u0119 uruchomi\u0107, kompilator musi wiedzie\u0107 w jakim miejscu zaczyna wykonywa\u0107 si\u0119 nasza aplikacja. Takim miejscem jest funcja  main . O funkcjach opowiemy sobie w innej lekcji. Na tym etapie zwr\u00f3\u0107 uwage na definicje naszej funkcji startowej:  1\n2\n3\n4\n5 int   main ()  { \n     // To jest nasza funkcja glowna \n     return   jakas_liczba ;  }    Co oznacza s\u0142\u00f3wko kluczowe  int ? Oznacza to tyle, \u017ce funkcja po zako\u0144czeniu swojego dzia\u0142ania zwraca typ zmiennej typu  int . O typach zmiennych opowiemy sobie za moment.",
            "title": "Funkcja main - punkt startowy naszej aplikacji"
        },
        {
            "location": "/lesson01-p1/#no-dobra-mam-funkcje-main-i-co-dalej",
            "text": "Przyjrzyjmy si\u0119 jeszcze raz na nasz kod \u017ar\u00f3d\u0142owy z pocz\u0105tku lekcji.   W linii numer 6 zadeklarowali\u015bmy zmienn\u0105 typu  int  o nazwie  variable . Dzi\u0119ki takiej deklaracji mo\u017cemy u\u017cy\u0107 naszej zmiennej w obr\u0119bie naszej funkcji (jest to zmienna lokalna).   W kolejnej linijce u\u017cyli\u015bmy funkcji wbudowanej  printf()  (printf to skr\u00f3t od  print formatted ). Wy\u015bwietla ona sformatowany tekst. Sp\u00f3jrzmy na pierwszy argument, kt\u00f3ry wchodzi do naszej funkcji: \"Hello! Your number is %i!\\n\" . Jest to tekst, kt\u00f3ry zostanie wy\u015bwietlony na ekranie.  %i  oznacza, \u017ce kompilator podstawi tu zmienn\u0105 typu  int .  \\n  na ko\u0144cu naszego tekstu oznacza znak nowej linii (z ang.  newline ). Jako drugi argument w funkcji  printf()  podali\u015bmy zmienn\u0105  variable . Dzi\u0119ki temu funkcja  printf()  podstawi warto\u015b\u0107 zmiennej pod  %i .  W linii numer 8 u\u017cyli\u015bmy funkcji  system() . Funkcja ta wywo\u0142uje polecenie systemowe (w naszym przypadku jest to polecenie  pause , kt\u00f3re zatrzymuje dzia\u0142anie naszego programu i oczekuje na wci\u015bni\u0119cie dowolnego klawisza). Niestety polecenie  pause  dzia\u0142a tylko w systemach Windows. W przypadku innych system\u00f3w musimy u\u017cy\u0107 innego rozwi\u0105zania, \u017ceby zatrzyma\u0107 dzia\u0142anie programu.  W ostatniej linii napisali\u015bmy  return 0  co oznacza, \u017ce program zwr\u00f3ci liczbe 0 po zako\u0144czeniu dzia\u0142ania.",
            "title": "No dobra! Mam funkcje main i co dalej?"
        },
        {
            "location": "/lesson01-p1/#kilka-sow-o-typach-w-c",
            "text": "Mamy klika rodzaj\u00f3w zmiennych. S\u0105 to zmienne:\n- typu  int , czyli liczby ca\u0142kowite 32-bitowe,\n- typu  float , czyli liczby zmiennoprzecinkowe pojedy\u0144czej precyzji,\n- typu  double , czyli liczby zmiennoprzecinkowe podw\u00f3jnej precyzji,\n- typu  char , czyli znak/litera lub  char * w przypadku \u0142ancuchu znak\u00f3w, czyli tekstu.  Oczywi\u015bcie mamy jeszcze wariant ze s\u0142owem  long , ale na tym etapie nie b\u0119d\u0119 o nim wspomina\u0107.   Wi\u0119cej o typach podstawowych  Wi\u0119cej informacji na temat typ\u00f3w podstawowych znajdziesz na przyk\u0142ad  tu .",
            "title": "Kilka s\u0142\u00f3w o typach w C"
        },
        {
            "location": "/lesson01-p1/#funkcja-printf",
            "text": "Przy wywo\u0142aniu funkcji  printf()  skorzystali\u015bmy z  %i . Jest to tzw.  format specifier . Na podstawie dokumentacji z  cplusplus.com  wymienimy kilka dost\u0119pnych format\u00f3w wy\u015bwietlanych danych. Mi\u0119dzy innymi s\u0105 to:\n-  %i  lub  %d  dla liczb typu ca\u0142kowitego,\n-  %f  dla liczby zmiennoprzecinkowych,\n-  %c  dla pojedynczego znaku,\n-  %s  dla \u0142a\u0144cucha znaku.  W funkcji  printf()  mo\u017cna u\u017cy\u0107 specjalnych znak\u00f3w za pomoc\u0105  \\  (przyk\u0142ad  \\n ). Zach\u0119cam do poczytania dokumentacji tej funkcji.",
            "title": "Funkcja printf()"
        },
        {
            "location": "/lesson01-p1/#na-zakonczenie-return-its_the_end",
            "text": "S\u0142\u00f3wko kluczowe  return  w funkcji  main()  wykorzystujemy po to, aby zasygnalizowa\u0107 stan wykonania naszego programu. Zwykle zwraca si\u0119:\n-  0 , gdy program zako\u0144czy\u0142 sie poprawnie,\n-  1  lub liczbe ujemn\u0105 gdy program zako\u0144czy\u0142 si\u0119 pora\u017ck\u0105.",
            "title": "Na zako\u0144czenie - return ITS_THE_END"
        },
        {
            "location": "/lesson01-p1/#praktyka-czyni-mistrza-czyli-zadania-do-zrobienia",
            "text": "Kod do zadania wygl\u0105da nast\u0119puj\u0105co:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 #include   <stdio.h>  #include   <stdlib.h>  int   main ( void )  { \n     const   float   pi   =   3.14159265 ; \n     char   text []   =   \"Some text here\" ; \n     int   number   =   1246754 ; \n     double   numerical_value   =   2674.3236434664311 ; \n\n     // Uzupelnij kod \n\n     system ( \"pause\" ); \n     return   EXIT_SUCCESS ;  }    Zadania:   Wy\u015bwietl liczbe pi z dok\u0142adno\u015bci\u0105 do trzeciego miejsca po przecinku,  Wy\u015bwietl znak 1, 3 i 8 z \u0142ancucha  text ,  Wy\u015bwietli liczbe  number  zaokr\u0105glaj\u0105c j\u0105 do pi\u0105tego miejsca,  Wy\u015bwietl liczb\u0119  numerical_value  w nast\u0119puj\u0105cy spos\u00f3b:  cz\u0119\u015b\u0107 ca\u0142kowit\u0105 zaokr\u0105glij do drugiego miejsca,  cz\u0119\u015b\u0107 u\u0142amkow\u0105 zaokr\u0105glij do \u00f3smego miejsca po przecinku.",
            "title": "Praktyka czyni mistrza... czyli zadania do zrobienia"
        }
    ]
}